/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var dstore_values_pb = require('../../dstore/values_pb.js');
goog.exportSymbol('proto.dstore.elastic.BoolQuery', null, global);
goog.exportSymbol('proto.dstore.elastic.Field', null, global);
goog.exportSymbol('proto.dstore.elastic.Query', null, global);
goog.exportSymbol('proto.dstore.elastic.Query.Range', null, global);
goog.exportSymbol('proto.dstore.elastic.Query.SimpleQueryString', null, global);
goog.exportSymbol('proto.dstore.elastic.Query.Terms', null, global);
goog.exportSymbol('proto.dstore.elastic.Query.Type', null, global);
goog.exportSymbol('proto.dstore.elastic.Range', null, global);
goog.exportSymbol('proto.dstore.elastic.Sort', null, global);
goog.exportSymbol('proto.dstore.elastic.Sort.FieldSort', null, global);
goog.exportSymbol('proto.dstore.elastic.Sort.Missing', null, global);
goog.exportSymbol('proto.dstore.elastic.Sort.Mode', null, global);
goog.exportSymbol('proto.dstore.elastic.Sort.Order', null, global);
goog.exportSymbol('proto.dstore.elastic.Sort.ScoreSort', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.elastic.Field = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dstore.elastic.Field.repeatedFields_, null);
};
goog.inherits(proto.dstore.elastic.Field, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.elastic.Field.displayName = 'proto.dstore.elastic.Field';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dstore.elastic.Field.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.elastic.Field.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.elastic.Field.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.elastic.Field} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.elastic.Field.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName(),
    multiField: msg.getMultiField(),
    valueList: jspb.Message.toObjectList(msg.getValueList(),
    dstore_values_pb.Value.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.elastic.Field}
 */
proto.dstore.elastic.Field.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.elastic.Field;
  return proto.dstore.elastic.Field.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.elastic.Field} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.elastic.Field}
 */
proto.dstore.elastic.Field.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMultiField(value);
      break;
    case 3:
      var value = new dstore_values_pb.Value;
      reader.readMessage(value,dstore_values_pb.Value.deserializeBinaryFromReader);
      msg.getValueList().push(value);
      msg.setValueList(msg.getValueList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.elastic.Field} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.Field.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.elastic.Field.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.Field.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getMultiField();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = this.getValueList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      dstore_values_pb.Value.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.elastic.Field} The clone.
 */
proto.dstore.elastic.Field.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.elastic.Field} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.dstore.elastic.Field.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.dstore.elastic.Field.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool multi_field = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dstore.elastic.Field.prototype.getMultiField = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 2, false));
};


/** @param {boolean} value  */
proto.dstore.elastic.Field.prototype.setMultiField = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated dstore.values.Value value = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.dstore.values.Value>}
 */
proto.dstore.elastic.Field.prototype.getValueList = function() {
  return /** @type{!Array.<!proto.dstore.values.Value>} */ (
    jspb.Message.getRepeatedWrapperField(this, dstore_values_pb.Value, 3));
};


/** @param {Array.<!proto.dstore.values.Value>|undefined} value  */
proto.dstore.elastic.Field.prototype.setValueList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


proto.dstore.elastic.Field.prototype.clearValueList = function() {
  this.setValueList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.elastic.Range = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dstore.elastic.Range, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.elastic.Range.displayName = 'proto.dstore.elastic.Range';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.elastic.Range.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.elastic.Range.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.elastic.Range} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.elastic.Range.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: msg.getFrom(),
    to: msg.getTo()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.elastic.Range}
 */
proto.dstore.elastic.Range.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.elastic.Range;
  return proto.dstore.elastic.Range.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.elastic.Range} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.elastic.Range}
 */
proto.dstore.elastic.Range.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.elastic.Range} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.Range.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.elastic.Range.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.Range.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.elastic.Range} The clone.
 */
proto.dstore.elastic.Range.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.elastic.Range} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.dstore.elastic.Range.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.dstore.elastic.Range.prototype.setFrom = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string to = 2;
 * @return {string}
 */
proto.dstore.elastic.Range.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.dstore.elastic.Range.prototype.setTo = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.elastic.BoolQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dstore.elastic.BoolQuery.repeatedFields_, null);
};
goog.inherits(proto.dstore.elastic.BoolQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.elastic.BoolQuery.displayName = 'proto.dstore.elastic.BoolQuery';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dstore.elastic.BoolQuery.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.elastic.BoolQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.elastic.BoolQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.elastic.BoolQuery} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.elastic.BoolQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    filterList: jspb.Message.toObjectList(msg.getFilterList(),
    proto.dstore.elastic.Query.toObject, includeInstance),
    mustList: jspb.Message.toObjectList(msg.getMustList(),
    proto.dstore.elastic.Query.toObject, includeInstance),
    shouldList: jspb.Message.toObjectList(msg.getShouldList(),
    proto.dstore.elastic.Query.toObject, includeInstance),
    mustNotList: jspb.Message.toObjectList(msg.getMustNotList(),
    proto.dstore.elastic.Query.toObject, includeInstance),
    minimumShouldMatch: msg.getMinimumShouldMatch(),
    boost: msg.getBoost()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.elastic.BoolQuery}
 */
proto.dstore.elastic.BoolQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.elastic.BoolQuery;
  return proto.dstore.elastic.BoolQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.elastic.BoolQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.elastic.BoolQuery}
 */
proto.dstore.elastic.BoolQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dstore.elastic.Query;
      reader.readMessage(value,proto.dstore.elastic.Query.deserializeBinaryFromReader);
      msg.getFilterList().push(value);
      msg.setFilterList(msg.getFilterList());
      break;
    case 2:
      var value = new proto.dstore.elastic.Query;
      reader.readMessage(value,proto.dstore.elastic.Query.deserializeBinaryFromReader);
      msg.getMustList().push(value);
      msg.setMustList(msg.getMustList());
      break;
    case 3:
      var value = new proto.dstore.elastic.Query;
      reader.readMessage(value,proto.dstore.elastic.Query.deserializeBinaryFromReader);
      msg.getShouldList().push(value);
      msg.setShouldList(msg.getShouldList());
      break;
    case 4:
      var value = new proto.dstore.elastic.Query;
      reader.readMessage(value,proto.dstore.elastic.Query.deserializeBinaryFromReader);
      msg.getMustNotList().push(value);
      msg.setMustNotList(msg.getMustNotList());
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinimumShouldMatch(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBoost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.elastic.BoolQuery} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.BoolQuery.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.elastic.BoolQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.BoolQuery.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFilterList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.dstore.elastic.Query.serializeBinaryToWriter
    );
  }
  f = this.getMustList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.dstore.elastic.Query.serializeBinaryToWriter
    );
  }
  f = this.getShouldList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.dstore.elastic.Query.serializeBinaryToWriter
    );
  }
  f = this.getMustNotList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.dstore.elastic.Query.serializeBinaryToWriter
    );
  }
  f = this.getMinimumShouldMatch();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getBoost();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.elastic.BoolQuery} The clone.
 */
proto.dstore.elastic.BoolQuery.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.elastic.BoolQuery} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Query filter = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.dstore.elastic.Query>}
 */
proto.dstore.elastic.BoolQuery.prototype.getFilterList = function() {
  return /** @type{!Array.<!proto.dstore.elastic.Query>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dstore.elastic.Query, 1));
};


/** @param {Array.<!proto.dstore.elastic.Query>|undefined} value  */
proto.dstore.elastic.BoolQuery.prototype.setFilterList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.dstore.elastic.BoolQuery.prototype.clearFilterList = function() {
  this.setFilterList([]);
};


/**
 * repeated Query must = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.dstore.elastic.Query>}
 */
proto.dstore.elastic.BoolQuery.prototype.getMustList = function() {
  return /** @type{!Array.<!proto.dstore.elastic.Query>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dstore.elastic.Query, 2));
};


/** @param {Array.<!proto.dstore.elastic.Query>|undefined} value  */
proto.dstore.elastic.BoolQuery.prototype.setMustList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.dstore.elastic.BoolQuery.prototype.clearMustList = function() {
  this.setMustList([]);
};


/**
 * repeated Query should = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.dstore.elastic.Query>}
 */
proto.dstore.elastic.BoolQuery.prototype.getShouldList = function() {
  return /** @type{!Array.<!proto.dstore.elastic.Query>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dstore.elastic.Query, 3));
};


/** @param {Array.<!proto.dstore.elastic.Query>|undefined} value  */
proto.dstore.elastic.BoolQuery.prototype.setShouldList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


proto.dstore.elastic.BoolQuery.prototype.clearShouldList = function() {
  this.setShouldList([]);
};


/**
 * repeated Query must_not = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.dstore.elastic.Query>}
 */
proto.dstore.elastic.BoolQuery.prototype.getMustNotList = function() {
  return /** @type{!Array.<!proto.dstore.elastic.Query>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dstore.elastic.Query, 4));
};


/** @param {Array.<!proto.dstore.elastic.Query>|undefined} value  */
proto.dstore.elastic.BoolQuery.prototype.setMustNotList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.dstore.elastic.BoolQuery.prototype.clearMustNotList = function() {
  this.setMustNotList([]);
};


/**
 * optional string minimum_should_match = 5;
 * @return {string}
 */
proto.dstore.elastic.BoolQuery.prototype.getMinimumShouldMatch = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.dstore.elastic.BoolQuery.prototype.setMinimumShouldMatch = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional double boost = 6;
 * @return {number}
 */
proto.dstore.elastic.BoolQuery.prototype.getBoost = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.dstore.elastic.BoolQuery.prototype.setBoost = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.elastic.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.dstore.elastic.Query.oneofGroups_);
};
goog.inherits(proto.dstore.elastic.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.elastic.Query.displayName = 'proto.dstore.elastic.Query';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.dstore.elastic.Query.oneofGroups_ = [[1,2,3,4,20]];

/**
 * @enum {number}
 */
proto.dstore.elastic.Query.QueryCase = {
  QUERY_NOT_SET: 0,
  TERMS_QUERY: 1,
  TYPE_QUERY: 2,
  SIMPLE_QUERY_STRING_QUERY: 3,
  RANGE_QUERY: 4,
  BOOL_QUERY: 20
};

/**
 * @return {proto.dstore.elastic.Query.QueryCase}
 */
proto.dstore.elastic.Query.prototype.getQueryCase = function() {
  return /** @type {proto.dstore.elastic.Query.QueryCase} */(jspb.Message.computeOneofCase(this, proto.dstore.elastic.Query.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.elastic.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.elastic.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.elastic.Query} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.elastic.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    termsQuery: (f = msg.getTermsQuery()) && proto.dstore.elastic.Query.Terms.toObject(includeInstance, f),
    typeQuery: (f = msg.getTypeQuery()) && proto.dstore.elastic.Query.Type.toObject(includeInstance, f),
    simpleQueryStringQuery: (f = msg.getSimpleQueryStringQuery()) && proto.dstore.elastic.Query.SimpleQueryString.toObject(includeInstance, f),
    rangeQuery: (f = msg.getRangeQuery()) && proto.dstore.elastic.Query.Range.toObject(includeInstance, f),
    boolQuery: (f = msg.getBoolQuery()) && proto.dstore.elastic.BoolQuery.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.elastic.Query}
 */
proto.dstore.elastic.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.elastic.Query;
  return proto.dstore.elastic.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.elastic.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.elastic.Query}
 */
proto.dstore.elastic.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dstore.elastic.Query.Terms;
      reader.readMessage(value,proto.dstore.elastic.Query.Terms.deserializeBinaryFromReader);
      msg.setTermsQuery(value);
      break;
    case 2:
      var value = new proto.dstore.elastic.Query.Type;
      reader.readMessage(value,proto.dstore.elastic.Query.Type.deserializeBinaryFromReader);
      msg.setTypeQuery(value);
      break;
    case 3:
      var value = new proto.dstore.elastic.Query.SimpleQueryString;
      reader.readMessage(value,proto.dstore.elastic.Query.SimpleQueryString.deserializeBinaryFromReader);
      msg.setSimpleQueryStringQuery(value);
      break;
    case 4:
      var value = new proto.dstore.elastic.Query.Range;
      reader.readMessage(value,proto.dstore.elastic.Query.Range.deserializeBinaryFromReader);
      msg.setRangeQuery(value);
      break;
    case 20:
      var value = new proto.dstore.elastic.BoolQuery;
      reader.readMessage(value,proto.dstore.elastic.BoolQuery.deserializeBinaryFromReader);
      msg.setBoolQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.elastic.Query} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.Query.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.elastic.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.Query.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTermsQuery();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.dstore.elastic.Query.Terms.serializeBinaryToWriter
    );
  }
  f = this.getTypeQuery();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.dstore.elastic.Query.Type.serializeBinaryToWriter
    );
  }
  f = this.getSimpleQueryStringQuery();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.dstore.elastic.Query.SimpleQueryString.serializeBinaryToWriter
    );
  }
  f = this.getRangeQuery();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.dstore.elastic.Query.Range.serializeBinaryToWriter
    );
  }
  f = this.getBoolQuery();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.dstore.elastic.BoolQuery.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.elastic.Query} The clone.
 */
proto.dstore.elastic.Query.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.elastic.Query} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Terms terms_query = 1;
 * @return {proto.dstore.elastic.Query.Terms}
 */
proto.dstore.elastic.Query.prototype.getTermsQuery = function() {
  return /** @type{proto.dstore.elastic.Query.Terms} */ (
    jspb.Message.getWrapperField(this, proto.dstore.elastic.Query.Terms, 1));
};


/** @param {proto.dstore.elastic.Query.Terms|undefined} value  */
proto.dstore.elastic.Query.prototype.setTermsQuery = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.dstore.elastic.Query.oneofGroups_[0], value);
};


proto.dstore.elastic.Query.prototype.clearTermsQuery = function() {
  this.setTermsQuery(undefined);
};


/**
 * optional Type type_query = 2;
 * @return {proto.dstore.elastic.Query.Type}
 */
proto.dstore.elastic.Query.prototype.getTypeQuery = function() {
  return /** @type{proto.dstore.elastic.Query.Type} */ (
    jspb.Message.getWrapperField(this, proto.dstore.elastic.Query.Type, 2));
};


/** @param {proto.dstore.elastic.Query.Type|undefined} value  */
proto.dstore.elastic.Query.prototype.setTypeQuery = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.dstore.elastic.Query.oneofGroups_[0], value);
};


proto.dstore.elastic.Query.prototype.clearTypeQuery = function() {
  this.setTypeQuery(undefined);
};


/**
 * optional SimpleQueryString simple_query_string_query = 3;
 * @return {proto.dstore.elastic.Query.SimpleQueryString}
 */
proto.dstore.elastic.Query.prototype.getSimpleQueryStringQuery = function() {
  return /** @type{proto.dstore.elastic.Query.SimpleQueryString} */ (
    jspb.Message.getWrapperField(this, proto.dstore.elastic.Query.SimpleQueryString, 3));
};


/** @param {proto.dstore.elastic.Query.SimpleQueryString|undefined} value  */
proto.dstore.elastic.Query.prototype.setSimpleQueryStringQuery = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.dstore.elastic.Query.oneofGroups_[0], value);
};


proto.dstore.elastic.Query.prototype.clearSimpleQueryStringQuery = function() {
  this.setSimpleQueryStringQuery(undefined);
};


/**
 * optional Range range_query = 4;
 * @return {proto.dstore.elastic.Query.Range}
 */
proto.dstore.elastic.Query.prototype.getRangeQuery = function() {
  return /** @type{proto.dstore.elastic.Query.Range} */ (
    jspb.Message.getWrapperField(this, proto.dstore.elastic.Query.Range, 4));
};


/** @param {proto.dstore.elastic.Query.Range|undefined} value  */
proto.dstore.elastic.Query.prototype.setRangeQuery = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.dstore.elastic.Query.oneofGroups_[0], value);
};


proto.dstore.elastic.Query.prototype.clearRangeQuery = function() {
  this.setRangeQuery(undefined);
};


/**
 * optional BoolQuery bool_query = 20;
 * @return {proto.dstore.elastic.BoolQuery}
 */
proto.dstore.elastic.Query.prototype.getBoolQuery = function() {
  return /** @type{proto.dstore.elastic.BoolQuery} */ (
    jspb.Message.getWrapperField(this, proto.dstore.elastic.BoolQuery, 20));
};


/** @param {proto.dstore.elastic.BoolQuery|undefined} value  */
proto.dstore.elastic.Query.prototype.setBoolQuery = function(value) {
  jspb.Message.setOneofWrapperField(this, 20, proto.dstore.elastic.Query.oneofGroups_[0], value);
};


proto.dstore.elastic.Query.prototype.clearBoolQuery = function() {
  this.setBoolQuery(undefined);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.elastic.Query.Terms = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dstore.elastic.Query.Terms.repeatedFields_, null);
};
goog.inherits(proto.dstore.elastic.Query.Terms, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.elastic.Query.Terms.displayName = 'proto.dstore.elastic.Query.Terms';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dstore.elastic.Query.Terms.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.elastic.Query.Terms.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.elastic.Query.Terms.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.elastic.Query.Terms} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.elastic.Query.Terms.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldName: msg.getFieldName(),
    valueList: jspb.Message.getField(msg, 2),
    allowPartialMatches: msg.getAllowPartialMatches()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.elastic.Query.Terms}
 */
proto.dstore.elastic.Query.Terms.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.elastic.Query.Terms;
  return proto.dstore.elastic.Query.Terms.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.elastic.Query.Terms} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.elastic.Query.Terms}
 */
proto.dstore.elastic.Query.Terms.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.getValueList().push(value);
      msg.setValueList(msg.getValueList());
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowPartialMatches(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.elastic.Query.Terms} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.Query.Terms.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.elastic.Query.Terms.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.Query.Terms.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFieldName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getValueList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = this.getAllowPartialMatches();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.elastic.Query.Terms} The clone.
 */
proto.dstore.elastic.Query.Terms.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.elastic.Query.Terms} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string field_name = 1;
 * @return {string}
 */
proto.dstore.elastic.Query.Terms.prototype.getFieldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.dstore.elastic.Query.Terms.prototype.setFieldName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated string value = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.dstore.elastic.Query.Terms.prototype.getValueList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {Array.<string>} value  */
proto.dstore.elastic.Query.Terms.prototype.setValueList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * optional bool allow_partial_matches = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dstore.elastic.Query.Terms.prototype.getAllowPartialMatches = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 3, false));
};


/** @param {boolean} value  */
proto.dstore.elastic.Query.Terms.prototype.setAllowPartialMatches = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.elastic.Query.Type = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dstore.elastic.Query.Type, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.elastic.Query.Type.displayName = 'proto.dstore.elastic.Query.Type';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.elastic.Query.Type.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.elastic.Query.Type.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.elastic.Query.Type} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.elastic.Query.Type.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: msg.getType()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.elastic.Query.Type}
 */
proto.dstore.elastic.Query.Type.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.elastic.Query.Type;
  return proto.dstore.elastic.Query.Type.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.elastic.Query.Type} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.elastic.Query.Type}
 */
proto.dstore.elastic.Query.Type.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.elastic.Query.Type} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.Query.Type.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.elastic.Query.Type.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.Query.Type.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.elastic.Query.Type} The clone.
 */
proto.dstore.elastic.Query.Type.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.elastic.Query.Type} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.dstore.elastic.Query.Type.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.dstore.elastic.Query.Type.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.elastic.Query.Range = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dstore.elastic.Query.Range, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.elastic.Query.Range.displayName = 'proto.dstore.elastic.Query.Range';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.elastic.Query.Range.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.elastic.Query.Range.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.elastic.Query.Range} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.elastic.Query.Range.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldName: msg.getFieldName(),
    greaterThanOrEqal: msg.getGreaterThanOrEqal(),
    greaterThan: msg.getGreaterThan(),
    lessThanOrEqual: msg.getLessThanOrEqual(),
    lessThan: msg.getLessThan()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.elastic.Query.Range}
 */
proto.dstore.elastic.Query.Range.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.elastic.Query.Range;
  return proto.dstore.elastic.Query.Range.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.elastic.Query.Range} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.elastic.Query.Range}
 */
proto.dstore.elastic.Query.Range.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGreaterThanOrEqal(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGreaterThan(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLessThanOrEqual(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLessThan(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.elastic.Query.Range} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.Query.Range.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.elastic.Query.Range.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.Query.Range.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFieldName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getGreaterThanOrEqal();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getGreaterThan();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getLessThanOrEqual();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getLessThan();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.elastic.Query.Range} The clone.
 */
proto.dstore.elastic.Query.Range.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.elastic.Query.Range} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string field_name = 1;
 * @return {string}
 */
proto.dstore.elastic.Query.Range.prototype.getFieldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.dstore.elastic.Query.Range.prototype.setFieldName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string greater_than_or_eqal = 2;
 * @return {string}
 */
proto.dstore.elastic.Query.Range.prototype.getGreaterThanOrEqal = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.dstore.elastic.Query.Range.prototype.setGreaterThanOrEqal = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string greater_than = 3;
 * @return {string}
 */
proto.dstore.elastic.Query.Range.prototype.getGreaterThan = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.dstore.elastic.Query.Range.prototype.setGreaterThan = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string less_than_or_equal = 4;
 * @return {string}
 */
proto.dstore.elastic.Query.Range.prototype.getLessThanOrEqual = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.dstore.elastic.Query.Range.prototype.setLessThanOrEqual = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string less_than = 5;
 * @return {string}
 */
proto.dstore.elastic.Query.Range.prototype.getLessThan = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.dstore.elastic.Query.Range.prototype.setLessThan = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.elastic.Query.SimpleQueryString = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dstore.elastic.Query.SimpleQueryString.repeatedFields_, null);
};
goog.inherits(proto.dstore.elastic.Query.SimpleQueryString, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.elastic.Query.SimpleQueryString.displayName = 'proto.dstore.elastic.Query.SimpleQueryString';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dstore.elastic.Query.SimpleQueryString.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.elastic.Query.SimpleQueryString.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.elastic.Query.SimpleQueryString.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.elastic.Query.SimpleQueryString} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.elastic.Query.SimpleQueryString.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: msg.getQuery(),
    fieldList: jspb.Message.getField(msg, 2),
    useAndAsDefaultOperator: msg.getUseAndAsDefaultOperator(),
    minimumShouldMatch: msg.getMinimumShouldMatch()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.elastic.Query.SimpleQueryString}
 */
proto.dstore.elastic.Query.SimpleQueryString.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.elastic.Query.SimpleQueryString;
  return proto.dstore.elastic.Query.SimpleQueryString.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.elastic.Query.SimpleQueryString} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.elastic.Query.SimpleQueryString}
 */
proto.dstore.elastic.Query.SimpleQueryString.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.getFieldList().push(value);
      msg.setFieldList(msg.getFieldList());
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseAndAsDefaultOperator(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinimumShouldMatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.elastic.Query.SimpleQueryString} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.Query.SimpleQueryString.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.elastic.Query.SimpleQueryString.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.Query.SimpleQueryString.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getFieldList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = this.getUseAndAsDefaultOperator();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = this.getMinimumShouldMatch();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.elastic.Query.SimpleQueryString} The clone.
 */
proto.dstore.elastic.Query.SimpleQueryString.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.elastic.Query.SimpleQueryString} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.dstore.elastic.Query.SimpleQueryString.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.dstore.elastic.Query.SimpleQueryString.prototype.setQuery = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated string field = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.dstore.elastic.Query.SimpleQueryString.prototype.getFieldList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {Array.<string>} value  */
proto.dstore.elastic.Query.SimpleQueryString.prototype.setFieldList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * optional bool use_and_as_default_operator = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dstore.elastic.Query.SimpleQueryString.prototype.getUseAndAsDefaultOperator = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 3, false));
};


/** @param {boolean} value  */
proto.dstore.elastic.Query.SimpleQueryString.prototype.setUseAndAsDefaultOperator = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string minimum_should_match = 4;
 * @return {string}
 */
proto.dstore.elastic.Query.SimpleQueryString.prototype.getMinimumShouldMatch = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.dstore.elastic.Query.SimpleQueryString.prototype.setMinimumShouldMatch = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.elastic.Sort = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.dstore.elastic.Sort.oneofGroups_);
};
goog.inherits(proto.dstore.elastic.Sort, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.elastic.Sort.displayName = 'proto.dstore.elastic.Sort';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.dstore.elastic.Sort.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.dstore.elastic.Sort.SortByCase = {
  SORT_BY_NOT_SET: 0,
  FIELD_SORT: 1,
  SCORE_SORT: 2
};

/**
 * @return {proto.dstore.elastic.Sort.SortByCase}
 */
proto.dstore.elastic.Sort.prototype.getSortByCase = function() {
  return /** @type {proto.dstore.elastic.Sort.SortByCase} */(jspb.Message.computeOneofCase(this, proto.dstore.elastic.Sort.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.elastic.Sort.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.elastic.Sort.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.elastic.Sort} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.elastic.Sort.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldSort: (f = msg.getFieldSort()) && proto.dstore.elastic.Sort.FieldSort.toObject(includeInstance, f),
    scoreSort: (f = msg.getScoreSort()) && proto.dstore.elastic.Sort.ScoreSort.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.elastic.Sort}
 */
proto.dstore.elastic.Sort.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.elastic.Sort;
  return proto.dstore.elastic.Sort.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.elastic.Sort} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.elastic.Sort}
 */
proto.dstore.elastic.Sort.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dstore.elastic.Sort.FieldSort;
      reader.readMessage(value,proto.dstore.elastic.Sort.FieldSort.deserializeBinaryFromReader);
      msg.setFieldSort(value);
      break;
    case 2:
      var value = new proto.dstore.elastic.Sort.ScoreSort;
      reader.readMessage(value,proto.dstore.elastic.Sort.ScoreSort.deserializeBinaryFromReader);
      msg.setScoreSort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.elastic.Sort} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.Sort.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.elastic.Sort.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.Sort.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFieldSort();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.dstore.elastic.Sort.FieldSort.serializeBinaryToWriter
    );
  }
  f = this.getScoreSort();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.dstore.elastic.Sort.ScoreSort.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.elastic.Sort} The clone.
 */
proto.dstore.elastic.Sort.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.elastic.Sort} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional FieldSort field_sort = 1;
 * @return {proto.dstore.elastic.Sort.FieldSort}
 */
proto.dstore.elastic.Sort.prototype.getFieldSort = function() {
  return /** @type{proto.dstore.elastic.Sort.FieldSort} */ (
    jspb.Message.getWrapperField(this, proto.dstore.elastic.Sort.FieldSort, 1));
};


/** @param {proto.dstore.elastic.Sort.FieldSort|undefined} value  */
proto.dstore.elastic.Sort.prototype.setFieldSort = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.dstore.elastic.Sort.oneofGroups_[0], value);
};


proto.dstore.elastic.Sort.prototype.clearFieldSort = function() {
  this.setFieldSort(undefined);
};


/**
 * optional ScoreSort score_sort = 2;
 * @return {proto.dstore.elastic.Sort.ScoreSort}
 */
proto.dstore.elastic.Sort.prototype.getScoreSort = function() {
  return /** @type{proto.dstore.elastic.Sort.ScoreSort} */ (
    jspb.Message.getWrapperField(this, proto.dstore.elastic.Sort.ScoreSort, 2));
};


/** @param {proto.dstore.elastic.Sort.ScoreSort|undefined} value  */
proto.dstore.elastic.Sort.prototype.setScoreSort = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.dstore.elastic.Sort.oneofGroups_[0], value);
};


proto.dstore.elastic.Sort.prototype.clearScoreSort = function() {
  this.setScoreSort(undefined);
};


/**
 * @enum {number}
 */
proto.dstore.elastic.Sort.Order = {
  ASCENDING: 0,
  DESCENDING: 1
};

/**
 * @enum {number}
 */
proto.dstore.elastic.Sort.Missing = {
  LAST: 0,
  FIRST: 1
};

/**
 * @enum {number}
 */
proto.dstore.elastic.Sort.Mode = {
  UNDEFINED: 0,
  MIN: 1,
  MAX: 2,
  SUM: 3,
  AVG: 4,
  MEDIAN: 5
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.elastic.Sort.ScoreSort = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dstore.elastic.Sort.ScoreSort, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.elastic.Sort.ScoreSort.displayName = 'proto.dstore.elastic.Sort.ScoreSort';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.elastic.Sort.ScoreSort.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.elastic.Sort.ScoreSort.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.elastic.Sort.ScoreSort} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.elastic.Sort.ScoreSort.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.elastic.Sort.ScoreSort}
 */
proto.dstore.elastic.Sort.ScoreSort.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.elastic.Sort.ScoreSort;
  return proto.dstore.elastic.Sort.ScoreSort.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.elastic.Sort.ScoreSort} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.elastic.Sort.ScoreSort}
 */
proto.dstore.elastic.Sort.ScoreSort.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.elastic.Sort.ScoreSort} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.Sort.ScoreSort.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.elastic.Sort.ScoreSort.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.Sort.ScoreSort.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.elastic.Sort.ScoreSort} The clone.
 */
proto.dstore.elastic.Sort.ScoreSort.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.elastic.Sort.ScoreSort} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.elastic.Sort.FieldSort = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dstore.elastic.Sort.FieldSort.repeatedFields_, null);
};
goog.inherits(proto.dstore.elastic.Sort.FieldSort, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.elastic.Sort.FieldSort.displayName = 'proto.dstore.elastic.Sort.FieldSort';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dstore.elastic.Sort.FieldSort.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.elastic.Sort.FieldSort.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.elastic.Sort.FieldSort.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.elastic.Sort.FieldSort} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.elastic.Sort.FieldSort.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldName: msg.getFieldName(),
    sortOrder: msg.getSortOrder(),
    missingTreatment: msg.getMissingTreatment(),
    sortMode: msg.getSortMode(),
    nestedFilterList: jspb.Message.toObjectList(msg.getNestedFilterList(),
    proto.dstore.elastic.Query.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.elastic.Sort.FieldSort}
 */
proto.dstore.elastic.Sort.FieldSort.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.elastic.Sort.FieldSort;
  return proto.dstore.elastic.Sort.FieldSort.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.elastic.Sort.FieldSort} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.elastic.Sort.FieldSort}
 */
proto.dstore.elastic.Sort.FieldSort.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldName(value);
      break;
    case 2:
      var value = /** @type {!proto.dstore.elastic.Sort.Order} */ (reader.readEnum());
      msg.setSortOrder(value);
      break;
    case 3:
      var value = /** @type {!proto.dstore.elastic.Sort.Missing} */ (reader.readEnum());
      msg.setMissingTreatment(value);
      break;
    case 4:
      var value = /** @type {!proto.dstore.elastic.Sort.Mode} */ (reader.readEnum());
      msg.setSortMode(value);
      break;
    case 5:
      var value = new proto.dstore.elastic.Query;
      reader.readMessage(value,proto.dstore.elastic.Query.deserializeBinaryFromReader);
      msg.getNestedFilterList().push(value);
      msg.setNestedFilterList(msg.getNestedFilterList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.elastic.Sort.FieldSort} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.Sort.FieldSort.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.elastic.Sort.FieldSort.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.Sort.FieldSort.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFieldName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSortOrder();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = this.getMissingTreatment();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = this.getSortMode();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = this.getNestedFilterList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.dstore.elastic.Query.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.elastic.Sort.FieldSort} The clone.
 */
proto.dstore.elastic.Sort.FieldSort.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.elastic.Sort.FieldSort} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string field_name = 1;
 * @return {string}
 */
proto.dstore.elastic.Sort.FieldSort.prototype.getFieldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.dstore.elastic.Sort.FieldSort.prototype.setFieldName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Order sort_order = 2;
 * @return {!proto.dstore.elastic.Sort.Order}
 */
proto.dstore.elastic.Sort.FieldSort.prototype.getSortOrder = function() {
  return /** @type {!proto.dstore.elastic.Sort.Order} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {!proto.dstore.elastic.Sort.Order} value  */
proto.dstore.elastic.Sort.FieldSort.prototype.setSortOrder = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Missing missing_treatment = 3;
 * @return {!proto.dstore.elastic.Sort.Missing}
 */
proto.dstore.elastic.Sort.FieldSort.prototype.getMissingTreatment = function() {
  return /** @type {!proto.dstore.elastic.Sort.Missing} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {!proto.dstore.elastic.Sort.Missing} value  */
proto.dstore.elastic.Sort.FieldSort.prototype.setMissingTreatment = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional Mode sort_mode = 4;
 * @return {!proto.dstore.elastic.Sort.Mode}
 */
proto.dstore.elastic.Sort.FieldSort.prototype.getSortMode = function() {
  return /** @type {!proto.dstore.elastic.Sort.Mode} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {!proto.dstore.elastic.Sort.Mode} value  */
proto.dstore.elastic.Sort.FieldSort.prototype.setSortMode = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated Query nested_filter = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.dstore.elastic.Query>}
 */
proto.dstore.elastic.Sort.FieldSort.prototype.getNestedFilterList = function() {
  return /** @type{!Array.<!proto.dstore.elastic.Query>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dstore.elastic.Query, 5));
};


/** @param {Array.<!proto.dstore.elastic.Query>|undefined} value  */
proto.dstore.elastic.Sort.FieldSort.prototype.setNestedFilterList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


proto.dstore.elastic.Sort.FieldSort.prototype.clearNestedFilterList = function() {
  this.setNestedFilterList([]);
};


goog.object.extend(exports, proto.dstore.elastic);
