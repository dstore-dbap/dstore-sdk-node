/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var dstore_elastic_elastic_pb = require('../../../dstore/elastic/elastic_pb.js');
var dstore_elastic_item_item_pb = require('../../../dstore/elastic/item/item_pb.js');
var dstore_values_pb = require('../../../dstore/values_pb.js');
goog.exportSymbol('proto.dstore.elastic.item.item_get.Request', null, global);
goog.exportSymbol('proto.dstore.elastic.item.item_get.Request.Facet', null, global);
goog.exportSymbol('proto.dstore.elastic.item.item_get.Request.Facet.FieldSort', null, global);
goog.exportSymbol('proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort', null, global);
goog.exportSymbol('proto.dstore.elastic.item.item_get.Request.RangeFacet', null, global);
goog.exportSymbol('proto.dstore.elastic.item.item_get.Response', null, global);
goog.exportSymbol('proto.dstore.elastic.item.item_get.Response.Facet', null, global);
goog.exportSymbol('proto.dstore.elastic.item.item_get.Response.Facet.FacetValue', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.elastic.item.item_get.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dstore.elastic.item.item_get.Request.repeatedFields_, null);
};
goog.inherits(proto.dstore.elastic.item.item_get.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.elastic.item.item_get.Request.displayName = 'proto.dstore.elastic.item.item_get.Request';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dstore.elastic.item.item_get.Request.repeatedFields_ = [3,5,6,15,16,20];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.elastic.item.item_get.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.elastic.item.item_get.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.elastic.item.item_get.Request} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.elastic.item.item_get.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseQuery: (f = msg.getBaseQuery()) && dstore_elastic_elastic_pb.BoolQuery.toObject(includeInstance, f),
    postQuery: (f = msg.getPostQuery()) && dstore_elastic_elastic_pb.BoolQuery.toObject(includeInstance, f),
    facetList: jspb.Message.toObjectList(msg.getFacetList(),
    proto.dstore.elastic.item.item_get.Request.Facet.toObject, includeInstance),
    rangeFacetList: jspb.Message.toObjectList(msg.getRangeFacetList(),
    proto.dstore.elastic.item.item_get.Request.RangeFacet.toObject, includeInstance),
    dateRangeFacetList: jspb.Message.toObjectList(msg.getDateRangeFacetList(),
    proto.dstore.elastic.item.item_get.Request.RangeFacet.toObject, includeInstance),
    onlyMatchingVariants: msg.getOnlyMatchingVariants(),
    from: msg.getFrom(),
    size: msg.getSize(),
    includeFieldPatternList: jspb.Message.getField(msg, 15),
    excludeFieldPatternList: jspb.Message.getField(msg, 16),
    sortList: jspb.Message.toObjectList(msg.getSortList(),
    dstore_elastic_elastic_pb.Sort.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.elastic.item.item_get.Request}
 */
proto.dstore.elastic.item.item_get.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.elastic.item.item_get.Request;
  return proto.dstore.elastic.item.item_get.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.elastic.item.item_get.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.elastic.item.item_get.Request}
 */
proto.dstore.elastic.item.item_get.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new dstore_elastic_elastic_pb.BoolQuery;
      reader.readMessage(value,dstore_elastic_elastic_pb.BoolQuery.deserializeBinaryFromReader);
      msg.setBaseQuery(value);
      break;
    case 2:
      var value = new dstore_elastic_elastic_pb.BoolQuery;
      reader.readMessage(value,dstore_elastic_elastic_pb.BoolQuery.deserializeBinaryFromReader);
      msg.setPostQuery(value);
      break;
    case 3:
      var value = new proto.dstore.elastic.item.item_get.Request.Facet;
      reader.readMessage(value,proto.dstore.elastic.item.item_get.Request.Facet.deserializeBinaryFromReader);
      msg.getFacetList().push(value);
      msg.setFacetList(msg.getFacetList());
      break;
    case 5:
      var value = new proto.dstore.elastic.item.item_get.Request.RangeFacet;
      reader.readMessage(value,proto.dstore.elastic.item.item_get.Request.RangeFacet.deserializeBinaryFromReader);
      msg.getRangeFacetList().push(value);
      msg.setRangeFacetList(msg.getRangeFacetList());
      break;
    case 6:
      var value = new proto.dstore.elastic.item.item_get.Request.RangeFacet;
      reader.readMessage(value,proto.dstore.elastic.item.item_get.Request.RangeFacet.deserializeBinaryFromReader);
      msg.getDateRangeFacetList().push(value);
      msg.setDateRangeFacetList(msg.getDateRangeFacetList());
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnlyMatchingVariants(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrom(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.getIncludeFieldPatternList().push(value);
      msg.setIncludeFieldPatternList(msg.getIncludeFieldPatternList());
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.getExcludeFieldPatternList().push(value);
      msg.setExcludeFieldPatternList(msg.getExcludeFieldPatternList());
      break;
    case 20:
      var value = new dstore_elastic_elastic_pb.Sort;
      reader.readMessage(value,dstore_elastic_elastic_pb.Sort.deserializeBinaryFromReader);
      msg.getSortList().push(value);
      msg.setSortList(msg.getSortList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.elastic.item.item_get.Request} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.item.item_get.Request.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.elastic.item.item_get.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.item.item_get.Request.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBaseQuery();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      dstore_elastic_elastic_pb.BoolQuery.serializeBinaryToWriter
    );
  }
  f = this.getPostQuery();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      dstore_elastic_elastic_pb.BoolQuery.serializeBinaryToWriter
    );
  }
  f = this.getFacetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.dstore.elastic.item.item_get.Request.Facet.serializeBinaryToWriter
    );
  }
  f = this.getRangeFacetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.dstore.elastic.item.item_get.Request.RangeFacet.serializeBinaryToWriter
    );
  }
  f = this.getDateRangeFacetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.dstore.elastic.item.item_get.Request.RangeFacet.serializeBinaryToWriter
    );
  }
  f = this.getOnlyMatchingVariants();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = this.getFrom();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = this.getSize();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = this.getIncludeFieldPatternList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      15,
      f
    );
  }
  f = this.getExcludeFieldPatternList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      16,
      f
    );
  }
  f = this.getSortList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      dstore_elastic_elastic_pb.Sort.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.elastic.item.item_get.Request} The clone.
 */
proto.dstore.elastic.item.item_get.Request.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.elastic.item.item_get.Request} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional dstore.elastic.BoolQuery base_query = 1;
 * @return {proto.dstore.elastic.BoolQuery}
 */
proto.dstore.elastic.item.item_get.Request.prototype.getBaseQuery = function() {
  return /** @type{proto.dstore.elastic.BoolQuery} */ (
    jspb.Message.getWrapperField(this, dstore_elastic_elastic_pb.BoolQuery, 1));
};


/** @param {proto.dstore.elastic.BoolQuery|undefined} value  */
proto.dstore.elastic.item.item_get.Request.prototype.setBaseQuery = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.dstore.elastic.item.item_get.Request.prototype.clearBaseQuery = function() {
  this.setBaseQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.dstore.elastic.item.item_get.Request.prototype.hasBaseQuery = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional dstore.elastic.BoolQuery post_query = 2;
 * @return {proto.dstore.elastic.BoolQuery}
 */
proto.dstore.elastic.item.item_get.Request.prototype.getPostQuery = function() {
  return /** @type{proto.dstore.elastic.BoolQuery} */ (
    jspb.Message.getWrapperField(this, dstore_elastic_elastic_pb.BoolQuery, 2));
};


/** @param {proto.dstore.elastic.BoolQuery|undefined} value  */
proto.dstore.elastic.item.item_get.Request.prototype.setPostQuery = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.dstore.elastic.item.item_get.Request.prototype.clearPostQuery = function() {
  this.setPostQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.dstore.elastic.item.item_get.Request.prototype.hasPostQuery = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Facet facet = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.dstore.elastic.item.item_get.Request.Facet>}
 */
proto.dstore.elastic.item.item_get.Request.prototype.getFacetList = function() {
  return /** @type{!Array.<!proto.dstore.elastic.item.item_get.Request.Facet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dstore.elastic.item.item_get.Request.Facet, 3));
};


/** @param {Array.<!proto.dstore.elastic.item.item_get.Request.Facet>} value  */
proto.dstore.elastic.item.item_get.Request.prototype.setFacetList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


proto.dstore.elastic.item.item_get.Request.prototype.clearFacetList = function() {
  this.setFacetList([]);
};


/**
 * repeated RangeFacet range_facet = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.dstore.elastic.item.item_get.Request.RangeFacet>}
 */
proto.dstore.elastic.item.item_get.Request.prototype.getRangeFacetList = function() {
  return /** @type{!Array.<!proto.dstore.elastic.item.item_get.Request.RangeFacet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dstore.elastic.item.item_get.Request.RangeFacet, 5));
};


/** @param {Array.<!proto.dstore.elastic.item.item_get.Request.RangeFacet>} value  */
proto.dstore.elastic.item.item_get.Request.prototype.setRangeFacetList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


proto.dstore.elastic.item.item_get.Request.prototype.clearRangeFacetList = function() {
  this.setRangeFacetList([]);
};


/**
 * repeated RangeFacet date_range_facet = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.dstore.elastic.item.item_get.Request.RangeFacet>}
 */
proto.dstore.elastic.item.item_get.Request.prototype.getDateRangeFacetList = function() {
  return /** @type{!Array.<!proto.dstore.elastic.item.item_get.Request.RangeFacet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dstore.elastic.item.item_get.Request.RangeFacet, 6));
};


/** @param {Array.<!proto.dstore.elastic.item.item_get.Request.RangeFacet>} value  */
proto.dstore.elastic.item.item_get.Request.prototype.setDateRangeFacetList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


proto.dstore.elastic.item.item_get.Request.prototype.clearDateRangeFacetList = function() {
  this.setDateRangeFacetList([]);
};


/**
 * optional bool only_matching_variants = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dstore.elastic.item.item_get.Request.prototype.getOnlyMatchingVariants = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 7, false));
};


/** @param {boolean} value  */
proto.dstore.elastic.item.item_get.Request.prototype.setOnlyMatchingVariants = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 from = 10;
 * @return {number}
 */
proto.dstore.elastic.item.item_get.Request.prototype.getFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 10, 0));
};


/** @param {number} value  */
proto.dstore.elastic.item.item_get.Request.prototype.setFrom = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional int32 size = 11;
 * @return {number}
 */
proto.dstore.elastic.item.item_get.Request.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 11, 0));
};


/** @param {number} value  */
proto.dstore.elastic.item.item_get.Request.prototype.setSize = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * repeated string include_field_pattern = 15;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.dstore.elastic.item.item_get.Request.prototype.getIncludeFieldPatternList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 15));
};


/** @param {Array.<string>} value  */
proto.dstore.elastic.item.item_get.Request.prototype.setIncludeFieldPatternList = function(value) {
  jspb.Message.setField(this, 15, value || []);
};


proto.dstore.elastic.item.item_get.Request.prototype.clearIncludeFieldPatternList = function() {
  jspb.Message.setField(this, 15, []);
};


/**
 * repeated string exclude_field_pattern = 16;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.dstore.elastic.item.item_get.Request.prototype.getExcludeFieldPatternList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 16));
};


/** @param {Array.<string>} value  */
proto.dstore.elastic.item.item_get.Request.prototype.setExcludeFieldPatternList = function(value) {
  jspb.Message.setField(this, 16, value || []);
};


proto.dstore.elastic.item.item_get.Request.prototype.clearExcludeFieldPatternList = function() {
  jspb.Message.setField(this, 16, []);
};


/**
 * repeated dstore.elastic.Sort sort = 20;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.dstore.elastic.Sort>}
 */
proto.dstore.elastic.item.item_get.Request.prototype.getSortList = function() {
  return /** @type{!Array.<!proto.dstore.elastic.Sort>} */ (
    jspb.Message.getRepeatedWrapperField(this, dstore_elastic_elastic_pb.Sort, 20));
};


/** @param {Array.<!proto.dstore.elastic.Sort>} value  */
proto.dstore.elastic.item.item_get.Request.prototype.setSortList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 20, value);
};


proto.dstore.elastic.item.item_get.Request.prototype.clearSortList = function() {
  this.setSortList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.elastic.item.item_get.Request.RangeFacet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dstore.elastic.item.item_get.Request.RangeFacet.repeatedFields_, null);
};
goog.inherits(proto.dstore.elastic.item.item_get.Request.RangeFacet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.elastic.item.item_get.Request.RangeFacet.displayName = 'proto.dstore.elastic.item.item_get.Request.RangeFacet';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dstore.elastic.item.item_get.Request.RangeFacet.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.elastic.item.item_get.Request.RangeFacet.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.elastic.item.item_get.Request.RangeFacet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.elastic.item.item_get.Request.RangeFacet} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.elastic.item.item_get.Request.RangeFacet.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldName: msg.getFieldName(),
    rangeList: jspb.Message.toObjectList(msg.getRangeList(),
    dstore_elastic_elastic_pb.Range.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.elastic.item.item_get.Request.RangeFacet}
 */
proto.dstore.elastic.item.item_get.Request.RangeFacet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.elastic.item.item_get.Request.RangeFacet;
  return proto.dstore.elastic.item.item_get.Request.RangeFacet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.elastic.item.item_get.Request.RangeFacet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.elastic.item.item_get.Request.RangeFacet}
 */
proto.dstore.elastic.item.item_get.Request.RangeFacet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldName(value);
      break;
    case 2:
      var value = new dstore_elastic_elastic_pb.Range;
      reader.readMessage(value,dstore_elastic_elastic_pb.Range.deserializeBinaryFromReader);
      msg.getRangeList().push(value);
      msg.setRangeList(msg.getRangeList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.elastic.item.item_get.Request.RangeFacet} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.item.item_get.Request.RangeFacet.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.elastic.item.item_get.Request.RangeFacet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.item.item_get.Request.RangeFacet.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFieldName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getRangeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      dstore_elastic_elastic_pb.Range.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.elastic.item.item_get.Request.RangeFacet} The clone.
 */
proto.dstore.elastic.item.item_get.Request.RangeFacet.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.elastic.item.item_get.Request.RangeFacet} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string field_name = 1;
 * @return {string}
 */
proto.dstore.elastic.item.item_get.Request.RangeFacet.prototype.getFieldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.dstore.elastic.item.item_get.Request.RangeFacet.prototype.setFieldName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated dstore.elastic.Range range = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.dstore.elastic.Range>}
 */
proto.dstore.elastic.item.item_get.Request.RangeFacet.prototype.getRangeList = function() {
  return /** @type{!Array.<!proto.dstore.elastic.Range>} */ (
    jspb.Message.getRepeatedWrapperField(this, dstore_elastic_elastic_pb.Range, 2));
};


/** @param {Array.<!proto.dstore.elastic.Range>} value  */
proto.dstore.elastic.item.item_get.Request.RangeFacet.prototype.setRangeList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.dstore.elastic.item.item_get.Request.RangeFacet.prototype.clearRangeList = function() {
  this.setRangeList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.elastic.item.item_get.Request.Facet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.dstore.elastic.item.item_get.Request.Facet.oneofGroups_);
};
goog.inherits(proto.dstore.elastic.item.item_get.Request.Facet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.elastic.item.item_get.Request.Facet.displayName = 'proto.dstore.elastic.item.item_get.Request.Facet';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.dstore.elastic.item.item_get.Request.Facet.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.dstore.elastic.item.item_get.Request.Facet.SortByCase = {
  SORT_BY_NOT_SET: 0,
  SORT_NO_SORT: 2,
  FIELD_SORT: 3
};

/**
 * @return {proto.dstore.elastic.item.item_get.Request.Facet.SortByCase}
 */
proto.dstore.elastic.item.item_get.Request.Facet.prototype.getSortByCase = function() {
  return /** @type {proto.dstore.elastic.item.item_get.Request.Facet.SortByCase} */(jspb.Message.computeOneofCase(this, proto.dstore.elastic.item.item_get.Request.Facet.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.elastic.item.item_get.Request.Facet.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.elastic.item.item_get.Request.Facet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.elastic.item.item_get.Request.Facet} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.elastic.item.item_get.Request.Facet.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldName: msg.getFieldName(),
    sortNoSort: (f = msg.getSortNoSort()) && proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort.toObject(includeInstance, f),
    fieldSort: (f = msg.getFieldSort()) && proto.dstore.elastic.item.item_get.Request.Facet.FieldSort.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.elastic.item.item_get.Request.Facet}
 */
proto.dstore.elastic.item.item_get.Request.Facet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.elastic.item.item_get.Request.Facet;
  return proto.dstore.elastic.item.item_get.Request.Facet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.elastic.item.item_get.Request.Facet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.elastic.item.item_get.Request.Facet}
 */
proto.dstore.elastic.item.item_get.Request.Facet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldName(value);
      break;
    case 2:
      var value = new proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort;
      reader.readMessage(value,proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort.deserializeBinaryFromReader);
      msg.setSortNoSort(value);
      break;
    case 3:
      var value = new proto.dstore.elastic.item.item_get.Request.Facet.FieldSort;
      reader.readMessage(value,proto.dstore.elastic.item.item_get.Request.Facet.FieldSort.deserializeBinaryFromReader);
      msg.setFieldSort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.elastic.item.item_get.Request.Facet} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.item.item_get.Request.Facet.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.elastic.item.item_get.Request.Facet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.item.item_get.Request.Facet.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFieldName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSortNoSort();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort.serializeBinaryToWriter
    );
  }
  f = this.getFieldSort();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.dstore.elastic.item.item_get.Request.Facet.FieldSort.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.elastic.item.item_get.Request.Facet} The clone.
 */
proto.dstore.elastic.item.item_get.Request.Facet.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.elastic.item.item_get.Request.Facet} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string field_name = 1;
 * @return {string}
 */
proto.dstore.elastic.item.item_get.Request.Facet.prototype.getFieldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.dstore.elastic.item.item_get.Request.Facet.prototype.setFieldName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional SortNoSort sort_no_sort = 2;
 * @return {proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort}
 */
proto.dstore.elastic.item.item_get.Request.Facet.prototype.getSortNoSort = function() {
  return /** @type{proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort} */ (
    jspb.Message.getWrapperField(this, proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort, 2));
};


/** @param {proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort|undefined} value  */
proto.dstore.elastic.item.item_get.Request.Facet.prototype.setSortNoSort = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.dstore.elastic.item.item_get.Request.Facet.oneofGroups_[0], value);
};


proto.dstore.elastic.item.item_get.Request.Facet.prototype.clearSortNoSort = function() {
  this.setSortNoSort(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.dstore.elastic.item.item_get.Request.Facet.prototype.hasSortNoSort = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FieldSort field_sort = 3;
 * @return {proto.dstore.elastic.item.item_get.Request.Facet.FieldSort}
 */
proto.dstore.elastic.item.item_get.Request.Facet.prototype.getFieldSort = function() {
  return /** @type{proto.dstore.elastic.item.item_get.Request.Facet.FieldSort} */ (
    jspb.Message.getWrapperField(this, proto.dstore.elastic.item.item_get.Request.Facet.FieldSort, 3));
};


/** @param {proto.dstore.elastic.item.item_get.Request.Facet.FieldSort|undefined} value  */
proto.dstore.elastic.item.item_get.Request.Facet.prototype.setFieldSort = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.dstore.elastic.item.item_get.Request.Facet.oneofGroups_[0], value);
};


proto.dstore.elastic.item.item_get.Request.Facet.prototype.clearFieldSort = function() {
  this.setFieldSort(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.dstore.elastic.item.item_get.Request.Facet.prototype.hasFieldSort = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort.displayName = 'proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort.toObject = function(includeInstance, msg) {
  var f, obj = {
    sortOrder: msg.getSortOrder()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort}
 */
proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort;
  return proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort}
 */
proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.dstore.elastic.Sort.Order} */ (reader.readEnum());
      msg.setSortOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSortOrder();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort} The clone.
 */
proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional dstore.elastic.Sort.Order sort_order = 1;
 * @return {!proto.dstore.elastic.Sort.Order}
 */
proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort.prototype.getSortOrder = function() {
  return /** @type {!proto.dstore.elastic.Sort.Order} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.dstore.elastic.Sort.Order} value  */
proto.dstore.elastic.item.item_get.Request.Facet.SortNoSort.prototype.setSortOrder = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.elastic.item.item_get.Request.Facet.FieldSort = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dstore.elastic.item.item_get.Request.Facet.FieldSort, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.elastic.item.item_get.Request.Facet.FieldSort.displayName = 'proto.dstore.elastic.item.item_get.Request.Facet.FieldSort';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.elastic.item.item_get.Request.Facet.FieldSort.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.elastic.item.item_get.Request.Facet.FieldSort.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.elastic.item.item_get.Request.Facet.FieldSort} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.elastic.item.item_get.Request.Facet.FieldSort.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldName: msg.getFieldName(),
    sortOrder: msg.getSortOrder(),
    sortMode: msg.getSortMode()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.elastic.item.item_get.Request.Facet.FieldSort}
 */
proto.dstore.elastic.item.item_get.Request.Facet.FieldSort.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.elastic.item.item_get.Request.Facet.FieldSort;
  return proto.dstore.elastic.item.item_get.Request.Facet.FieldSort.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.elastic.item.item_get.Request.Facet.FieldSort} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.elastic.item.item_get.Request.Facet.FieldSort}
 */
proto.dstore.elastic.item.item_get.Request.Facet.FieldSort.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldName(value);
      break;
    case 2:
      var value = /** @type {!proto.dstore.elastic.Sort.Order} */ (reader.readEnum());
      msg.setSortOrder(value);
      break;
    case 3:
      var value = /** @type {!proto.dstore.elastic.Sort.Mode} */ (reader.readEnum());
      msg.setSortMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.elastic.item.item_get.Request.Facet.FieldSort} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.item.item_get.Request.Facet.FieldSort.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.elastic.item.item_get.Request.Facet.FieldSort.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.item.item_get.Request.Facet.FieldSort.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFieldName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSortOrder();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = this.getSortMode();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.elastic.item.item_get.Request.Facet.FieldSort} The clone.
 */
proto.dstore.elastic.item.item_get.Request.Facet.FieldSort.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.elastic.item.item_get.Request.Facet.FieldSort} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string field_name = 1;
 * @return {string}
 */
proto.dstore.elastic.item.item_get.Request.Facet.FieldSort.prototype.getFieldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.dstore.elastic.item.item_get.Request.Facet.FieldSort.prototype.setFieldName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional dstore.elastic.Sort.Order sort_order = 2;
 * @return {!proto.dstore.elastic.Sort.Order}
 */
proto.dstore.elastic.item.item_get.Request.Facet.FieldSort.prototype.getSortOrder = function() {
  return /** @type {!proto.dstore.elastic.Sort.Order} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {!proto.dstore.elastic.Sort.Order} value  */
proto.dstore.elastic.item.item_get.Request.Facet.FieldSort.prototype.setSortOrder = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional dstore.elastic.Sort.Mode sort_mode = 3;
 * @return {!proto.dstore.elastic.Sort.Mode}
 */
proto.dstore.elastic.item.item_get.Request.Facet.FieldSort.prototype.getSortMode = function() {
  return /** @type {!proto.dstore.elastic.Sort.Mode} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {!proto.dstore.elastic.Sort.Mode} value  */
proto.dstore.elastic.item.item_get.Request.Facet.FieldSort.prototype.setSortMode = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.elastic.item.item_get.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dstore.elastic.item.item_get.Response.repeatedFields_, null);
};
goog.inherits(proto.dstore.elastic.item.item_get.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.elastic.item.item_get.Response.displayName = 'proto.dstore.elastic.item.item_get.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dstore.elastic.item.item_get.Response.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.elastic.item.item_get.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.elastic.item.item_get.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.elastic.item.item_get.Response} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.elastic.item.item_get.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalHits: msg.getTotalHits(),
    itemList: jspb.Message.toObjectList(msg.getItemList(),
    dstore_elastic_item_item_pb.Item.toObject, includeInstance),
    facetList: jspb.Message.toObjectList(msg.getFacetList(),
    proto.dstore.elastic.item.item_get.Response.Facet.toObject, includeInstance),
    elasticQueryString: msg.getElasticQueryString()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.elastic.item.item_get.Response}
 */
proto.dstore.elastic.item.item_get.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.elastic.item.item_get.Response;
  return proto.dstore.elastic.item.item_get.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.elastic.item.item_get.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.elastic.item.item_get.Response}
 */
proto.dstore.elastic.item.item_get.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalHits(value);
      break;
    case 3:
      var value = new dstore_elastic_item_item_pb.Item;
      reader.readMessage(value,dstore_elastic_item_item_pb.Item.deserializeBinaryFromReader);
      msg.getItemList().push(value);
      msg.setItemList(msg.getItemList());
      break;
    case 4:
      var value = new proto.dstore.elastic.item.item_get.Response.Facet;
      reader.readMessage(value,proto.dstore.elastic.item.item_get.Response.Facet.deserializeBinaryFromReader);
      msg.getFacetList().push(value);
      msg.setFacetList(msg.getFacetList());
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setElasticQueryString(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.elastic.item.item_get.Response} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.item.item_get.Response.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.elastic.item.item_get.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.item.item_get.Response.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTotalHits();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      dstore_elastic_item_item_pb.Item.serializeBinaryToWriter
    );
  }
  f = this.getFacetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.dstore.elastic.item.item_get.Response.Facet.serializeBinaryToWriter
    );
  }
  f = this.getElasticQueryString();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.elastic.item.item_get.Response} The clone.
 */
proto.dstore.elastic.item.item_get.Response.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.elastic.item.item_get.Response} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 total_hits = 2;
 * @return {number}
 */
proto.dstore.elastic.item.item_get.Response.prototype.getTotalHits = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.dstore.elastic.item.item_get.Response.prototype.setTotalHits = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated dstore.elastic.item.item.Item item = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.dstore.elastic.item.item.Item>}
 */
proto.dstore.elastic.item.item_get.Response.prototype.getItemList = function() {
  return /** @type{!Array.<!proto.dstore.elastic.item.item.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, dstore_elastic_item_item_pb.Item, 3));
};


/** @param {Array.<!proto.dstore.elastic.item.item.Item>} value  */
proto.dstore.elastic.item.item_get.Response.prototype.setItemList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


proto.dstore.elastic.item.item_get.Response.prototype.clearItemList = function() {
  this.setItemList([]);
};


/**
 * repeated Facet facet = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.dstore.elastic.item.item_get.Response.Facet>}
 */
proto.dstore.elastic.item.item_get.Response.prototype.getFacetList = function() {
  return /** @type{!Array.<!proto.dstore.elastic.item.item_get.Response.Facet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dstore.elastic.item.item_get.Response.Facet, 4));
};


/** @param {Array.<!proto.dstore.elastic.item.item_get.Response.Facet>} value  */
proto.dstore.elastic.item.item_get.Response.prototype.setFacetList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.dstore.elastic.item.item_get.Response.prototype.clearFacetList = function() {
  this.setFacetList([]);
};


/**
 * optional string elastic_query_string = 5;
 * @return {string}
 */
proto.dstore.elastic.item.item_get.Response.prototype.getElasticQueryString = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.dstore.elastic.item.item_get.Response.prototype.setElasticQueryString = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.elastic.item.item_get.Response.Facet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dstore.elastic.item.item_get.Response.Facet.repeatedFields_, null);
};
goog.inherits(proto.dstore.elastic.item.item_get.Response.Facet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.elastic.item.item_get.Response.Facet.displayName = 'proto.dstore.elastic.item.item_get.Response.Facet';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dstore.elastic.item.item_get.Response.Facet.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.elastic.item.item_get.Response.Facet.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.elastic.item.item_get.Response.Facet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.elastic.item.item_get.Response.Facet} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.elastic.item.item_get.Response.Facet.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldName: msg.getFieldName(),
    facetValueList: jspb.Message.toObjectList(msg.getFacetValueList(),
    proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.toObject, includeInstance),
    rangeFrom: msg.getRangeFrom(),
    rangeTo: msg.getRangeTo()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.elastic.item.item_get.Response.Facet}
 */
proto.dstore.elastic.item.item_get.Response.Facet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.elastic.item.item_get.Response.Facet;
  return proto.dstore.elastic.item.item_get.Response.Facet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.elastic.item.item_get.Response.Facet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.elastic.item.item_get.Response.Facet}
 */
proto.dstore.elastic.item.item_get.Response.Facet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldName(value);
      break;
    case 2:
      var value = new proto.dstore.elastic.item.item_get.Response.Facet.FacetValue;
      reader.readMessage(value,proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.deserializeBinaryFromReader);
      msg.getFacetValueList().push(value);
      msg.setFacetValueList(msg.getFacetValueList());
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRangeFrom(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRangeTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.elastic.item.item_get.Response.Facet} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.item.item_get.Response.Facet.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.elastic.item.item_get.Response.Facet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.item.item_get.Response.Facet.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFieldName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getFacetValueList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.serializeBinaryToWriter
    );
  }
  f = this.getRangeFrom();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = this.getRangeTo();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.elastic.item.item_get.Response.Facet} The clone.
 */
proto.dstore.elastic.item.item_get.Response.Facet.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.elastic.item.item_get.Response.Facet} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string field_name = 1;
 * @return {string}
 */
proto.dstore.elastic.item.item_get.Response.Facet.prototype.getFieldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.dstore.elastic.item.item_get.Response.Facet.prototype.setFieldName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated FacetValue facet_value = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.dstore.elastic.item.item_get.Response.Facet.FacetValue>}
 */
proto.dstore.elastic.item.item_get.Response.Facet.prototype.getFacetValueList = function() {
  return /** @type{!Array.<!proto.dstore.elastic.item.item_get.Response.Facet.FacetValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dstore.elastic.item.item_get.Response.Facet.FacetValue, 2));
};


/** @param {Array.<!proto.dstore.elastic.item.item_get.Response.Facet.FacetValue>} value  */
proto.dstore.elastic.item.item_get.Response.Facet.prototype.setFacetValueList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.dstore.elastic.item.item_get.Response.Facet.prototype.clearFacetValueList = function() {
  this.setFacetValueList([]);
};


/**
 * optional double range_from = 10;
 * @return {number}
 */
proto.dstore.elastic.item.item_get.Response.Facet.prototype.getRangeFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 10, 0));
};


/** @param {number} value  */
proto.dstore.elastic.item.item_get.Response.Facet.prototype.setRangeFrom = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional double range_to = 11;
 * @return {number}
 */
proto.dstore.elastic.item.item_get.Response.Facet.prototype.getRangeTo = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 11, 0));
};


/** @param {number} value  */
proto.dstore.elastic.item.item_get.Response.Facet.prototype.setRangeTo = function(value) {
  jspb.Message.setField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.elastic.item.item_get.Response.Facet.FacetValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dstore.elastic.item.item_get.Response.Facet.FacetValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.displayName = 'proto.dstore.elastic.item.item_get.Response.Facet.FacetValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.elastic.item.item_get.Response.Facet.FacetValue} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = msg.getValue()) && dstore_values_pb.Value.toObject(includeInstance, f),
    totalItemCount: msg.getTotalItemCount(),
    matchingItemCount: msg.getMatchingItemCount(),
    active: msg.getActive(),
    minValue: msg.getMinValue(),
    maxValue: msg.getMaxValue()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.elastic.item.item_get.Response.Facet.FacetValue}
 */
proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.elastic.item.item_get.Response.Facet.FacetValue;
  return proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.elastic.item.item_get.Response.Facet.FacetValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.elastic.item.item_get.Response.Facet.FacetValue}
 */
proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new dstore_values_pb.Value;
      reader.readMessage(value,dstore_values_pb.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalItemCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMatchingItemCount(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinValue(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.elastic.item.item_get.Response.Facet.FacetValue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      dstore_values_pb.Value.serializeBinaryToWriter
    );
  }
  f = this.getTotalItemCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getMatchingItemCount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getActive();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = this.getMinValue();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = this.getMaxValue();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.elastic.item.item_get.Response.Facet.FacetValue} The clone.
 */
proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.elastic.item.item_get.Response.Facet.FacetValue} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional dstore.values.Value value = 1;
 * @return {proto.dstore.values.Value}
 */
proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.prototype.getValue = function() {
  return /** @type{proto.dstore.values.Value} */ (
    jspb.Message.getWrapperField(this, dstore_values_pb.Value, 1));
};


/** @param {proto.dstore.values.Value|undefined} value  */
proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 total_item_count = 2;
 * @return {number}
 */
proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.prototype.getTotalItemCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.prototype.setTotalItemCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 matching_item_count = 3;
 * @return {number}
 */
proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.prototype.getMatchingItemCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.prototype.setMatchingItemCount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool active = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 4, false));
};


/** @param {boolean} value  */
proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.prototype.setActive = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional double min_value = 5;
 * @return {number}
 */
proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.prototype.getMinValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.prototype.setMinValue = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional double max_value = 6;
 * @return {number}
 */
proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.prototype.getMaxValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.dstore.elastic.item.item_get.Response.Facet.FacetValue.prototype.setMaxValue = function(value) {
  jspb.Message.setField(this, 6, value);
};


goog.object.extend(exports, proto.dstore.elastic.item.item_get);
