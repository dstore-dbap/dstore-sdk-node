/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var dstore_elastic_elastic_pb = require('../../../dstore/elastic/elastic_pb.js');
var dstore_elastic_item_node_pb = require('../../../dstore/elastic/item/node_pb.js');
var dstore_values_pb = require('../../../dstore/values_pb.js');
goog.exportSymbol('proto.dstore.elastic.item.Facet', null, global);
goog.exportSymbol('proto.dstore.elastic.item.Facet.FacetValue', null, global);
goog.exportSymbol('proto.dstore.elastic.item.Item', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.elastic.item.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dstore.elastic.item.Item.repeatedFields_, null);
};
goog.inherits(proto.dstore.elastic.item.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.elastic.item.Item.displayName = 'proto.dstore.elastic.item.Item';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dstore.elastic.item.Item.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.elastic.item.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.elastic.item.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.elastic.item.Item} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.elastic.item.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    node: (f = msg.getNode()) && dstore_elastic_item_node_pb.Node.toObject(includeInstance, f),
    variantNodeList: jspb.Message.toObjectList(msg.getVariantNodeList(),
    dstore_elastic_item_node_pb.Node.toObject, includeInstance),
    lastUpdated: (f = msg.getLastUpdated()) && dstore_values_pb.timestampValue.toObject(includeInstance, f),
    score: msg.getScore(),
    indexName: msg.getIndexName(),
    documentId: msg.getDocumentId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.elastic.item.Item}
 */
proto.dstore.elastic.item.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.elastic.item.Item;
  return proto.dstore.elastic.item.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.elastic.item.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.elastic.item.Item}
 */
proto.dstore.elastic.item.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new dstore_elastic_item_node_pb.Node;
      reader.readMessage(value,dstore_elastic_item_node_pb.Node.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    case 2:
      var value = new dstore_elastic_item_node_pb.Node;
      reader.readMessage(value,dstore_elastic_item_node_pb.Node.deserializeBinaryFromReader);
      msg.getVariantNodeList().push(value);
      msg.setVariantNodeList(msg.getVariantNodeList());
      break;
    case 3:
      var value = new dstore_values_pb.timestampValue;
      reader.readMessage(value,dstore_values_pb.timestampValue.deserializeBinaryFromReader);
      msg.setLastUpdated(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setScore(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setIndexName(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocumentId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.elastic.item.Item} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.item.Item.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.elastic.item.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.item.Item.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      dstore_elastic_item_node_pb.Node.serializeBinaryToWriter
    );
  }
  f = this.getVariantNodeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      dstore_elastic_item_node_pb.Node.serializeBinaryToWriter
    );
  }
  f = this.getLastUpdated();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      dstore_values_pb.timestampValue.serializeBinaryToWriter
    );
  }
  f = this.getScore();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = this.getIndexName();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getDocumentId();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.elastic.item.Item} The clone.
 */
proto.dstore.elastic.item.Item.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.elastic.item.Item} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional dstore.elastic.node.Node node = 1;
 * @return {proto.dstore.elastic.node.Node}
 */
proto.dstore.elastic.item.Item.prototype.getNode = function() {
  return /** @type{proto.dstore.elastic.node.Node} */ (
    jspb.Message.getWrapperField(this, dstore_elastic_item_node_pb.Node, 1));
};


/** @param {proto.dstore.elastic.node.Node|undefined} value  */
proto.dstore.elastic.item.Item.prototype.setNode = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.dstore.elastic.item.Item.prototype.clearNode = function() {
  this.setNode(undefined);
};


/**
 * repeated dstore.elastic.node.Node variant_node = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.dstore.elastic.node.Node>}
 */
proto.dstore.elastic.item.Item.prototype.getVariantNodeList = function() {
  return /** @type{!Array.<!proto.dstore.elastic.node.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, dstore_elastic_item_node_pb.Node, 2));
};


/** @param {Array.<!proto.dstore.elastic.node.Node>|undefined} value  */
proto.dstore.elastic.item.Item.prototype.setVariantNodeList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.dstore.elastic.item.Item.prototype.clearVariantNodeList = function() {
  this.setVariantNodeList([]);
};


/**
 * optional dstore.values.timestampValue last_updated = 3;
 * @return {proto.dstore.values.timestampValue}
 */
proto.dstore.elastic.item.Item.prototype.getLastUpdated = function() {
  return /** @type{proto.dstore.values.timestampValue} */ (
    jspb.Message.getWrapperField(this, dstore_values_pb.timestampValue, 3));
};


/** @param {proto.dstore.values.timestampValue|undefined} value  */
proto.dstore.elastic.item.Item.prototype.setLastUpdated = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.dstore.elastic.item.Item.prototype.clearLastUpdated = function() {
  this.setLastUpdated(undefined);
};


/**
 * optional double score = 10;
 * @return {number}
 */
proto.dstore.elastic.item.Item.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 10, 0));
};


/** @param {number} value  */
proto.dstore.elastic.item.Item.prototype.setScore = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string index_name = 11;
 * @return {string}
 */
proto.dstore.elastic.item.Item.prototype.getIndexName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 11, ""));
};


/** @param {string} value  */
proto.dstore.elastic.item.Item.prototype.setIndexName = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string document_id = 12;
 * @return {string}
 */
proto.dstore.elastic.item.Item.prototype.getDocumentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 12, ""));
};


/** @param {string} value  */
proto.dstore.elastic.item.Item.prototype.setDocumentId = function(value) {
  jspb.Message.setField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.elastic.item.Facet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dstore.elastic.item.Facet.repeatedFields_, null);
};
goog.inherits(proto.dstore.elastic.item.Facet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.elastic.item.Facet.displayName = 'proto.dstore.elastic.item.Facet';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dstore.elastic.item.Facet.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.elastic.item.Facet.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.elastic.item.Facet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.elastic.item.Facet} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.elastic.item.Facet.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldName: msg.getFieldName(),
    facetValueList: jspb.Message.toObjectList(msg.getFacetValueList(),
    proto.dstore.elastic.item.Facet.FacetValue.toObject, includeInstance),
    rangeFrom: msg.getRangeFrom(),
    rangeTo: msg.getRangeTo()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.elastic.item.Facet}
 */
proto.dstore.elastic.item.Facet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.elastic.item.Facet;
  return proto.dstore.elastic.item.Facet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.elastic.item.Facet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.elastic.item.Facet}
 */
proto.dstore.elastic.item.Facet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldName(value);
      break;
    case 2:
      var value = new proto.dstore.elastic.item.Facet.FacetValue;
      reader.readMessage(value,proto.dstore.elastic.item.Facet.FacetValue.deserializeBinaryFromReader);
      msg.getFacetValueList().push(value);
      msg.setFacetValueList(msg.getFacetValueList());
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRangeFrom(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRangeTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.elastic.item.Facet} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.item.Facet.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.elastic.item.Facet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.item.Facet.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFieldName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getFacetValueList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.dstore.elastic.item.Facet.FacetValue.serializeBinaryToWriter
    );
  }
  f = this.getRangeFrom();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = this.getRangeTo();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.elastic.item.Facet} The clone.
 */
proto.dstore.elastic.item.Facet.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.elastic.item.Facet} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string field_name = 1;
 * @return {string}
 */
proto.dstore.elastic.item.Facet.prototype.getFieldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.dstore.elastic.item.Facet.prototype.setFieldName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated FacetValue facet_value = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.dstore.elastic.item.Facet.FacetValue>}
 */
proto.dstore.elastic.item.Facet.prototype.getFacetValueList = function() {
  return /** @type{!Array.<!proto.dstore.elastic.item.Facet.FacetValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dstore.elastic.item.Facet.FacetValue, 2));
};


/** @param {Array.<!proto.dstore.elastic.item.Facet.FacetValue>|undefined} value  */
proto.dstore.elastic.item.Facet.prototype.setFacetValueList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.dstore.elastic.item.Facet.prototype.clearFacetValueList = function() {
  this.setFacetValueList([]);
};


/**
 * optional double range_from = 10;
 * @return {number}
 */
proto.dstore.elastic.item.Facet.prototype.getRangeFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 10, 0));
};


/** @param {number} value  */
proto.dstore.elastic.item.Facet.prototype.setRangeFrom = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional double range_to = 11;
 * @return {number}
 */
proto.dstore.elastic.item.Facet.prototype.getRangeTo = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 11, 0));
};


/** @param {number} value  */
proto.dstore.elastic.item.Facet.prototype.setRangeTo = function(value) {
  jspb.Message.setField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.elastic.item.Facet.FacetValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dstore.elastic.item.Facet.FacetValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.elastic.item.Facet.FacetValue.displayName = 'proto.dstore.elastic.item.Facet.FacetValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.elastic.item.Facet.FacetValue.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.elastic.item.Facet.FacetValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.elastic.item.Facet.FacetValue} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.elastic.item.Facet.FacetValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = msg.getValue()) && dstore_values_pb.Value.toObject(includeInstance, f),
    totalItemCount: msg.getTotalItemCount(),
    matchingItemCount: msg.getMatchingItemCount(),
    active: msg.getActive(),
    minValue: msg.getMinValue(),
    maxValue: msg.getMaxValue()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.elastic.item.Facet.FacetValue}
 */
proto.dstore.elastic.item.Facet.FacetValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.elastic.item.Facet.FacetValue;
  return proto.dstore.elastic.item.Facet.FacetValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.elastic.item.Facet.FacetValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.elastic.item.Facet.FacetValue}
 */
proto.dstore.elastic.item.Facet.FacetValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new dstore_values_pb.Value;
      reader.readMessage(value,dstore_values_pb.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalItemCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMatchingItemCount(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinValue(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.elastic.item.Facet.FacetValue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.item.Facet.FacetValue.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.elastic.item.Facet.FacetValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.elastic.item.Facet.FacetValue.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      dstore_values_pb.Value.serializeBinaryToWriter
    );
  }
  f = this.getTotalItemCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getMatchingItemCount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getActive();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = this.getMinValue();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = this.getMaxValue();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.elastic.item.Facet.FacetValue} The clone.
 */
proto.dstore.elastic.item.Facet.FacetValue.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.elastic.item.Facet.FacetValue} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional dstore.values.Value value = 1;
 * @return {proto.dstore.values.Value}
 */
proto.dstore.elastic.item.Facet.FacetValue.prototype.getValue = function() {
  return /** @type{proto.dstore.values.Value} */ (
    jspb.Message.getWrapperField(this, dstore_values_pb.Value, 1));
};


/** @param {proto.dstore.values.Value|undefined} value  */
proto.dstore.elastic.item.Facet.FacetValue.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.dstore.elastic.item.Facet.FacetValue.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * optional int32 total_item_count = 2;
 * @return {number}
 */
proto.dstore.elastic.item.Facet.FacetValue.prototype.getTotalItemCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.dstore.elastic.item.Facet.FacetValue.prototype.setTotalItemCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 matching_item_count = 3;
 * @return {number}
 */
proto.dstore.elastic.item.Facet.FacetValue.prototype.getMatchingItemCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.dstore.elastic.item.Facet.FacetValue.prototype.setMatchingItemCount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool active = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dstore.elastic.item.Facet.FacetValue.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 4, false));
};


/** @param {boolean} value  */
proto.dstore.elastic.item.Facet.FacetValue.prototype.setActive = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional double min_value = 5;
 * @return {number}
 */
proto.dstore.elastic.item.Facet.FacetValue.prototype.getMinValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.dstore.elastic.item.Facet.FacetValue.prototype.setMinValue = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional double max_value = 6;
 * @return {number}
 */
proto.dstore.elastic.item.Facet.FacetValue.prototype.getMaxValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.dstore.elastic.item.Facet.FacetValue.prototype.setMaxValue = function(value) {
  jspb.Message.setField(this, 6, value);
};


goog.object.extend(exports, proto.dstore.elastic.item);
