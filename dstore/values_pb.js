/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.dstore.values.Value', null, global);
goog.exportSymbol('proto.dstore.values.booleanValue', null, global);
goog.exportSymbol('proto.dstore.values.bytesValue', null, global);
goog.exportSymbol('proto.dstore.values.decimalValue', null, global);
goog.exportSymbol('proto.dstore.values.doubleValue', null, global);
goog.exportSymbol('proto.dstore.values.integerValue', null, global);
goog.exportSymbol('proto.dstore.values.longValue', null, global);
goog.exportSymbol('proto.dstore.values.stringValue', null, global);
goog.exportSymbol('proto.dstore.values.timestampValue', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.values.integerValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dstore.values.integerValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.values.integerValue.displayName = 'proto.dstore.values.integerValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.values.integerValue.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.values.integerValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.values.integerValue} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.values.integerValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.values.integerValue}
 */
proto.dstore.values.integerValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.values.integerValue;
  return proto.dstore.values.integerValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.values.integerValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.values.integerValue}
 */
proto.dstore.values.integerValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.values.integerValue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.values.integerValue.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.values.integerValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.values.integerValue.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValue();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.values.integerValue} The clone.
 */
proto.dstore.values.integerValue.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.values.integerValue} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 value = 1;
 * @return {number}
 */
proto.dstore.values.integerValue.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.dstore.values.integerValue.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.values.stringValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dstore.values.stringValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.values.stringValue.displayName = 'proto.dstore.values.stringValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.values.stringValue.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.values.stringValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.values.stringValue} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.values.stringValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.values.stringValue}
 */
proto.dstore.values.stringValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.values.stringValue;
  return proto.dstore.values.stringValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.values.stringValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.values.stringValue}
 */
proto.dstore.values.stringValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.values.stringValue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.values.stringValue.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.values.stringValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.values.stringValue.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.values.stringValue} The clone.
 */
proto.dstore.values.stringValue.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.values.stringValue} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.dstore.values.stringValue.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.dstore.values.stringValue.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.values.bytesValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dstore.values.bytesValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.values.bytesValue.displayName = 'proto.dstore.values.bytesValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.values.bytesValue.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.values.bytesValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.values.bytesValue} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.values.bytesValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.values.bytesValue}
 */
proto.dstore.values.bytesValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.values.bytesValue;
  return proto.dstore.values.bytesValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.values.bytesValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.values.bytesValue}
 */
proto.dstore.values.bytesValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.values.bytesValue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.values.bytesValue.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.values.bytesValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.values.bytesValue.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.values.bytesValue} The clone.
 */
proto.dstore.values.bytesValue.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.values.bytesValue} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dstore.values.bytesValue.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.dstore.values.bytesValue.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.dstore.values.bytesValue.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value  */
proto.dstore.values.bytesValue.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.values.doubleValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dstore.values.doubleValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.values.doubleValue.displayName = 'proto.dstore.values.doubleValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.values.doubleValue.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.values.doubleValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.values.doubleValue} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.values.doubleValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.values.doubleValue}
 */
proto.dstore.values.doubleValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.values.doubleValue;
  return proto.dstore.values.doubleValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.values.doubleValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.values.doubleValue}
 */
proto.dstore.values.doubleValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.values.doubleValue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.values.doubleValue.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.values.doubleValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.values.doubleValue.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.values.doubleValue} The clone.
 */
proto.dstore.values.doubleValue.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.values.doubleValue} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional double value = 1;
 * @return {number}
 */
proto.dstore.values.doubleValue.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.dstore.values.doubleValue.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.values.booleanValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dstore.values.booleanValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.values.booleanValue.displayName = 'proto.dstore.values.booleanValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.values.booleanValue.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.values.booleanValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.values.booleanValue} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.values.booleanValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.values.booleanValue}
 */
proto.dstore.values.booleanValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.values.booleanValue;
  return proto.dstore.values.booleanValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.values.booleanValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.values.booleanValue}
 */
proto.dstore.values.booleanValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.values.booleanValue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.values.booleanValue.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.values.booleanValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.values.booleanValue.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValue();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.values.booleanValue} The clone.
 */
proto.dstore.values.booleanValue.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.values.booleanValue} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool value = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dstore.values.booleanValue.prototype.getValue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 1, false));
};


/** @param {boolean} value  */
proto.dstore.values.booleanValue.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.values.decimalValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dstore.values.decimalValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.values.decimalValue.displayName = 'proto.dstore.values.decimalValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.values.decimalValue.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.values.decimalValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.values.decimalValue} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.values.decimalValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.values.decimalValue}
 */
proto.dstore.values.decimalValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.values.decimalValue;
  return proto.dstore.values.decimalValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.values.decimalValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.values.decimalValue}
 */
proto.dstore.values.decimalValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.values.decimalValue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.values.decimalValue.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.values.decimalValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.values.decimalValue.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.values.decimalValue} The clone.
 */
proto.dstore.values.decimalValue.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.values.decimalValue} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.dstore.values.decimalValue.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.dstore.values.decimalValue.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.values.timestampValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dstore.values.timestampValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.values.timestampValue.displayName = 'proto.dstore.values.timestampValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.values.timestampValue.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.values.timestampValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.values.timestampValue} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.values.timestampValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = msg.getValue()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.values.timestampValue}
 */
proto.dstore.values.timestampValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.values.timestampValue;
  return proto.dstore.values.timestampValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.values.timestampValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.values.timestampValue}
 */
proto.dstore.values.timestampValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.values.timestampValue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.values.timestampValue.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.values.timestampValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.values.timestampValue.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.values.timestampValue} The clone.
 */
proto.dstore.values.timestampValue.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.values.timestampValue} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional google.protobuf.Timestamp value = 1;
 * @return {proto.google.protobuf.Timestamp}
 */
proto.dstore.values.timestampValue.prototype.getValue = function() {
  return /** @type{proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/** @param {proto.google.protobuf.Timestamp|undefined} value  */
proto.dstore.values.timestampValue.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.dstore.values.timestampValue.prototype.clearValue = function() {
  this.setValue(undefined);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.values.longValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dstore.values.longValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.values.longValue.displayName = 'proto.dstore.values.longValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.values.longValue.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.values.longValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.values.longValue} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.values.longValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.values.longValue}
 */
proto.dstore.values.longValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.values.longValue;
  return proto.dstore.values.longValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.values.longValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.values.longValue}
 */
proto.dstore.values.longValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.values.longValue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.values.longValue.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.values.longValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.values.longValue.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValue();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.values.longValue} The clone.
 */
proto.dstore.values.longValue.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.values.longValue} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 value = 1;
 * @return {number}
 */
proto.dstore.values.longValue.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.dstore.values.longValue.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dstore.values.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.dstore.values.Value.oneofGroups_);
};
goog.inherits(proto.dstore.values.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dstore.values.Value.displayName = 'proto.dstore.values.Value';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.dstore.values.Value.oneofGroups_ = [[10,11,12,13,14,15,16,17]];

/**
 * @enum {number}
 */
proto.dstore.values.Value.ValueCase = {
  VALUE_NOT_SET: 0,
  INTEGER_VALUE: 10,
  STRING_VALUE: 11,
  BYTE_VALUE: 12,
  DOUBLE_VALUE: 13,
  BOOLEAN_VALUE: 14,
  DECIMAL_VALUE: 15,
  TIMESTAMP_VALUE: 16,
  LONG_VALUE: 17
};

/**
 * @return {proto.dstore.values.Value.ValueCase}
 */
proto.dstore.values.Value.prototype.getValueCase = function() {
  return /** @type {proto.dstore.values.Value.ValueCase} */(jspb.Message.computeOneofCase(this, proto.dstore.values.Value.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dstore.values.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.dstore.values.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dstore.values.Value} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dstore.values.Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    integerValue: (f = msg.getIntegerValue()) && proto.dstore.values.integerValue.toObject(includeInstance, f),
    stringValue: (f = msg.getStringValue()) && proto.dstore.values.stringValue.toObject(includeInstance, f),
    byteValue: (f = msg.getByteValue()) && proto.dstore.values.bytesValue.toObject(includeInstance, f),
    doubleValue: (f = msg.getDoubleValue()) && proto.dstore.values.doubleValue.toObject(includeInstance, f),
    booleanValue: (f = msg.getBooleanValue()) && proto.dstore.values.booleanValue.toObject(includeInstance, f),
    decimalValue: (f = msg.getDecimalValue()) && proto.dstore.values.decimalValue.toObject(includeInstance, f),
    timestampValue: (f = msg.getTimestampValue()) && proto.dstore.values.timestampValue.toObject(includeInstance, f),
    longValue: (f = msg.getLongValue()) && proto.dstore.values.longValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dstore.values.Value}
 */
proto.dstore.values.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dstore.values.Value;
  return proto.dstore.values.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dstore.values.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dstore.values.Value}
 */
proto.dstore.values.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = new proto.dstore.values.integerValue;
      reader.readMessage(value,proto.dstore.values.integerValue.deserializeBinaryFromReader);
      msg.setIntegerValue(value);
      break;
    case 11:
      var value = new proto.dstore.values.stringValue;
      reader.readMessage(value,proto.dstore.values.stringValue.deserializeBinaryFromReader);
      msg.setStringValue(value);
      break;
    case 12:
      var value = new proto.dstore.values.bytesValue;
      reader.readMessage(value,proto.dstore.values.bytesValue.deserializeBinaryFromReader);
      msg.setByteValue(value);
      break;
    case 13:
      var value = new proto.dstore.values.doubleValue;
      reader.readMessage(value,proto.dstore.values.doubleValue.deserializeBinaryFromReader);
      msg.setDoubleValue(value);
      break;
    case 14:
      var value = new proto.dstore.values.booleanValue;
      reader.readMessage(value,proto.dstore.values.booleanValue.deserializeBinaryFromReader);
      msg.setBooleanValue(value);
      break;
    case 15:
      var value = new proto.dstore.values.decimalValue;
      reader.readMessage(value,proto.dstore.values.decimalValue.deserializeBinaryFromReader);
      msg.setDecimalValue(value);
      break;
    case 16:
      var value = new proto.dstore.values.timestampValue;
      reader.readMessage(value,proto.dstore.values.timestampValue.deserializeBinaryFromReader);
      msg.setTimestampValue(value);
      break;
    case 17:
      var value = new proto.dstore.values.longValue;
      reader.readMessage(value,proto.dstore.values.longValue.deserializeBinaryFromReader);
      msg.setLongValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dstore.values.Value} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.values.Value.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dstore.values.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dstore.values.Value.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getIntegerValue();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.dstore.values.integerValue.serializeBinaryToWriter
    );
  }
  f = this.getStringValue();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.dstore.values.stringValue.serializeBinaryToWriter
    );
  }
  f = this.getByteValue();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.dstore.values.bytesValue.serializeBinaryToWriter
    );
  }
  f = this.getDoubleValue();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.dstore.values.doubleValue.serializeBinaryToWriter
    );
  }
  f = this.getBooleanValue();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.dstore.values.booleanValue.serializeBinaryToWriter
    );
  }
  f = this.getDecimalValue();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.dstore.values.decimalValue.serializeBinaryToWriter
    );
  }
  f = this.getTimestampValue();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.dstore.values.timestampValue.serializeBinaryToWriter
    );
  }
  f = this.getLongValue();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.dstore.values.longValue.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dstore.values.Value} The clone.
 */
proto.dstore.values.Value.prototype.cloneMessage = function() {
  return /** @type {!proto.dstore.values.Value} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional integerValue integer_value = 10;
 * @return {proto.dstore.values.integerValue}
 */
proto.dstore.values.Value.prototype.getIntegerValue = function() {
  return /** @type{proto.dstore.values.integerValue} */ (
    jspb.Message.getWrapperField(this, proto.dstore.values.integerValue, 10));
};


/** @param {proto.dstore.values.integerValue|undefined} value  */
proto.dstore.values.Value.prototype.setIntegerValue = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.dstore.values.Value.oneofGroups_[0], value);
};


proto.dstore.values.Value.prototype.clearIntegerValue = function() {
  this.setIntegerValue(undefined);
};


/**
 * optional stringValue string_value = 11;
 * @return {proto.dstore.values.stringValue}
 */
proto.dstore.values.Value.prototype.getStringValue = function() {
  return /** @type{proto.dstore.values.stringValue} */ (
    jspb.Message.getWrapperField(this, proto.dstore.values.stringValue, 11));
};


/** @param {proto.dstore.values.stringValue|undefined} value  */
proto.dstore.values.Value.prototype.setStringValue = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.dstore.values.Value.oneofGroups_[0], value);
};


proto.dstore.values.Value.prototype.clearStringValue = function() {
  this.setStringValue(undefined);
};


/**
 * optional bytesValue byte_value = 12;
 * @return {proto.dstore.values.bytesValue}
 */
proto.dstore.values.Value.prototype.getByteValue = function() {
  return /** @type{proto.dstore.values.bytesValue} */ (
    jspb.Message.getWrapperField(this, proto.dstore.values.bytesValue, 12));
};


/** @param {proto.dstore.values.bytesValue|undefined} value  */
proto.dstore.values.Value.prototype.setByteValue = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.dstore.values.Value.oneofGroups_[0], value);
};


proto.dstore.values.Value.prototype.clearByteValue = function() {
  this.setByteValue(undefined);
};


/**
 * optional doubleValue double_value = 13;
 * @return {proto.dstore.values.doubleValue}
 */
proto.dstore.values.Value.prototype.getDoubleValue = function() {
  return /** @type{proto.dstore.values.doubleValue} */ (
    jspb.Message.getWrapperField(this, proto.dstore.values.doubleValue, 13));
};


/** @param {proto.dstore.values.doubleValue|undefined} value  */
proto.dstore.values.Value.prototype.setDoubleValue = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.dstore.values.Value.oneofGroups_[0], value);
};


proto.dstore.values.Value.prototype.clearDoubleValue = function() {
  this.setDoubleValue(undefined);
};


/**
 * optional booleanValue boolean_value = 14;
 * @return {proto.dstore.values.booleanValue}
 */
proto.dstore.values.Value.prototype.getBooleanValue = function() {
  return /** @type{proto.dstore.values.booleanValue} */ (
    jspb.Message.getWrapperField(this, proto.dstore.values.booleanValue, 14));
};


/** @param {proto.dstore.values.booleanValue|undefined} value  */
proto.dstore.values.Value.prototype.setBooleanValue = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.dstore.values.Value.oneofGroups_[0], value);
};


proto.dstore.values.Value.prototype.clearBooleanValue = function() {
  this.setBooleanValue(undefined);
};


/**
 * optional decimalValue decimal_value = 15;
 * @return {proto.dstore.values.decimalValue}
 */
proto.dstore.values.Value.prototype.getDecimalValue = function() {
  return /** @type{proto.dstore.values.decimalValue} */ (
    jspb.Message.getWrapperField(this, proto.dstore.values.decimalValue, 15));
};


/** @param {proto.dstore.values.decimalValue|undefined} value  */
proto.dstore.values.Value.prototype.setDecimalValue = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.dstore.values.Value.oneofGroups_[0], value);
};


proto.dstore.values.Value.prototype.clearDecimalValue = function() {
  this.setDecimalValue(undefined);
};


/**
 * optional timestampValue timestamp_value = 16;
 * @return {proto.dstore.values.timestampValue}
 */
proto.dstore.values.Value.prototype.getTimestampValue = function() {
  return /** @type{proto.dstore.values.timestampValue} */ (
    jspb.Message.getWrapperField(this, proto.dstore.values.timestampValue, 16));
};


/** @param {proto.dstore.values.timestampValue|undefined} value  */
proto.dstore.values.Value.prototype.setTimestampValue = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.dstore.values.Value.oneofGroups_[0], value);
};


proto.dstore.values.Value.prototype.clearTimestampValue = function() {
  this.setTimestampValue(undefined);
};


/**
 * optional longValue long_value = 17;
 * @return {proto.dstore.values.longValue}
 */
proto.dstore.values.Value.prototype.getLongValue = function() {
  return /** @type{proto.dstore.values.longValue} */ (
    jspb.Message.getWrapperField(this, proto.dstore.values.longValue, 17));
};


/** @param {proto.dstore.values.longValue|undefined} value  */
proto.dstore.values.Value.prototype.setLongValue = function(value) {
  jspb.Message.setOneofWrapperField(this, 17, proto.dstore.values.Value.oneofGroups_[0], value);
};


proto.dstore.values.Value.prototype.clearLongValue = function() {
  this.setLongValue(undefined);
};


goog.object.extend(exports, proto.dstore.values);
